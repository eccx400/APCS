import java.util.TreeMap;


/**
 * TODO Write a one-sentence summary of your class here. TODO Follow it with
 * additional details about its purpose, what abstraction it represents, and how
 * to use it.
 * 
 * @author TODO Your Name
 * @version TODO the date
 * @author Period - TODO Your Period
 * @author Assignment - TODO Assignment Name
 * @author Sources - TODO list collaborators
 */
public class MorseCode
{
    private static final char DOT = '.';
 
    private static final char DASH = '-';
 
    private static TreeMap<Character, String> codeMap;
 
    private static TreeNode<Character> decodeTree;
 
 
    public static void start()
    {
        codeMap = new TreeMap<Character, String>();
 
        // put a space in the root of the decoding tree
        decodeTree = new TreeNode<Character>( ' ', null, null ); // autoboxing
 
        addSymbol( 'A', ".-" );
        addSymbol( 'B', "-..." );
        addSymbol( 'C', "-.-." );
        addSymbol( 'D', "-.." );
        addSymbol( 'E', "." );
        addSymbol( 'F', "..-." );
        addSymbol( 'G', "--." );
        addSymbol( 'H', "...." );
        addSymbol( 'I', ".." );
        addSymbol( 'J', ".---" );
        addSymbol( 'K', "-.-" );
        addSymbol( 'L', ".-.." );
        addSymbol( 'M', "--" );
        addSymbol( 'N', "-." );
        addSymbol( 'O', "---" );
        addSymbol( 'P', ".--." );
        addSymbol( 'Q', "--.-" );
        addSymbol( 'R', ".-." );
        addSymbol( 'S', "..." );
        addSymbol( 'T', "-" );
        addSymbol( 'U', "..-" );
        addSymbol( 'V', "...-" );
        addSymbol( 'W', ".--" );
        addSymbol( 'X', "-..-" );
        addSymbol( 'Y', "-.--" );
        addSymbol( 'Z', "--.." );
        addSymbol( '0', "-----" );
        addSymbol( '1', ".----" );
        addSymbol( '2', "..---" );
        addSymbol( '3', "...--" );
        addSymbol( '4', "....-" );
        addSymbol( '5', "....." );
        addSymbol( '6', "-...." );
        addSymbol( '7', "--..." );
        addSymbol( '8', "---.." );
        addSymbol( '9', "----." );
        addSymbol( '.', ".-.-.-" );
        addSymbol( ',', "--..--" );
        addSymbol( '?', "..--.." );
         
        Integer x = new Integer(9);
        Integer y = new Integer(10);
        double z = (double)x + y;
        System.out.println(z);
 
 
    }
     
    public static void process(TreeNode root)
    {
      if (root == null)
        return;
      process(root.getLeft());
      process(root.getRight());
      String s = (String)root.getValue();
      if (root.getLeft() != null)
        s += root.getLeft().getValue();
      if (root.getRight() != null)
        s += root.getRight().getValue();
      root.setValue(s);
      System.out.println(s);
    }
 
 
 
    /**
     * Inserts a letter and its Morse code string into the encoding map and
     * calls treeInsert to insert them into the decoding tree.
     */
    private static void addSymbol( char letter, String code )
    {
        codeMap.put( letter, code );
        treeInsert( letter, code );
    }
 
 
    /**
     * Inserts a letter and its Morse code string into the decoding tree. Each
     * dot-dash string corresponds to a path in the tree from the root to a
     * node: at a "dot" go left, at a "dash" go right. The node at the end of
     * the path holds the symbol for that code string.
     */
    private static void treeInsert( char letter, String code )
    {
        TreeNode<Character> newLetter = decodeTree;
 
        while ( !code.isEmpty() )
        {
            char symbol = code.charAt( 0 );
            code = code.substring( 1 );
            if ( symbol == DOT )
            {
                if ( newLetter.getLeft() == null )
                {
                    TreeNode<Character> node = new TreeNode<Character>( ' ',null, null );
                    newLetter.setLeft( node );
                }
                newLetter = newLetter.getLeft();
            }
            else if ( symbol == DASH )
            {
                if ( newLetter.getRight() == null )
                {
                    TreeNode<Character> node = new TreeNode<Character>( ' ' );
                    newLetter.setRight( node );
                }
                newLetter = newLetter.getRight();
 
            }
        }
 
        newLetter.setValue( letter );
 
    }
 
 
    /**
     * Converts text into a Morse code message. Adds a space after a dot-dash
     * sequence for each letter. Other spaces in the text are transferred
     * directly into the encoded message.
     * 
     * @return the encoded message.
     */
    public static String encode( String text )
    {
        StringBuffer morse = new StringBuffer( 400 );
        text = text.toUpperCase();
 
        while ( !text.isEmpty() )
        {
            char letter = text.charAt( 0 );
            text = text.substring( 1 );
            if ( letter != ' ' )
            {
                morse.append( codeMap.get( letter ) );
            }
            morse.append( " " );
        }
 
        return morse.toString();
    }
 
 
    /**
     * Converts a Morse code message into a text string. Assumes that dot-dash
     * sequences for each letter are separated by one space. Additional spaces
     * are transferred directly into text.
     * 
     * @return the plain text message.
     */
    public static String decode( String morse )
    {
        StringBuffer text = new StringBuffer( 100 );
        TreeNode<Character> node = decodeTree;
        StringBuffer code = new StringBuffer();
 
        while ( !morse.isEmpty() )
        {
            char symbol = morse.charAt( 0 );
            morse = morse.substring( 1 );
            if ( symbol == ' ' )
            {
                String c = code.toString();
                while ( !c.isEmpty() )
                {
                    if ( !c.isEmpty() )
                    {
                        char move = c.charAt( 0 );
                        c = c.substring( 1 );
                        if ( move == DOT )
                        {
                            node = node.getLeft();
                        }
                        else if ( move == DASH )
                        {
                            node = node.getRight();
                        }
                    }
                }
                text.append( node.getValue() );
 
                node = decodeTree;
                code = new StringBuffer();
 
                if ( morse.length() > 0 && morse.charAt( 0 ) == ' ' )
                {
                    text.append( ' ' );
                    morse = morse.substring( 1 );
                }
            }
            else
            {
                code.append( symbol );
            }
 
        }
        return text.toString();
 
    }
 
 
    // --------------------------------------------------------------------
    // For test purposes only. Not to be used in completing the assignment
 
    protected TreeMap<Character, String> getCodeMap()
    {
        return codeMap;
    }
 
 
    protected TreeNode<Character> getDecodeTree()
    {
        return decodeTree;
    }
}