1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
import java.util.*;
 
/**
   Implements a priority queue based on a min-heap.
 
   @author  TODO Your Name
   @version Date
 
   @author Period - TODO Your Period
   @author Assignment - TODO Assignment Name
 
   @author Sources - TODO list collaborators
 */
public class HeapPriorityQueue
{
    private static final int DFLT_CAPACITY = 101;
    private Object[] items;
    private int numItems;
    private final Comparator<Object> comparator;
 
    public HeapPriorityQueue()
    {
        this(DFLT_CAPACITY, null);
    }
 
    public HeapPriorityQueue(Comparator<Object> c)
    {
        this(DFLT_CAPACITY, c);
    }
 
    public HeapPriorityQueue(int initialCapacity)
    {
        this(initialCapacity, null);
    }
 
    public HeapPriorityQueue(int initialCapacity, Comparator<Object> c)
    {
        items = new Object[initialCapacity + 1];
        comparator = c;
    }
 
    /**
     *  Returns true if this priority queue is empty;
     *  otherwise returns false.
     */
    public boolean isEmpty()
    {
        return numItems == 0;
    }
 
    /**
     *  Returns the highest priority element without removing
     *  it from this priority queue.
     */
    public Object peek()
    {
        if (numItems == 0)
        {
            throw new NoSuchElementException();
        }
        return items[1];
    }
 
    /**
     *  Adds obj to this priority queue; returns true.
     */
    public boolean add(Object obj)
    {
        numItems++;
        if (numItems >= items.length)  // items[0] is not used
            growCapacity();
        items[numItems] = obj;
        reheapUp();
        return true;
    }
 
    /**
     *  Removes and returns the highest priority item.
     */
    public Object remove()
    {
        if (numItems == 0)
        {
            throw new NoSuchElementException();
        }
 
        Object minObject = items[1];
        items[1] = items[numItems];
        numItems--;
        reheapDown();
        return minObject;
    }
 
    //**************************************************************************
 
    private boolean lessThan(Object obj1, Object obj2)
    {
        if (comparator != null)
            return comparator.compare(obj1, obj2) < 0;
        else
            return ((Comparable)obj1).compareTo(obj2) < 0;
    }
 
 
    public void reheapDown()
    {
 
        int i = 1; 
        while ( i <= numItems / 2 )
        {
            int value;
            Object temp;
 
            if ( lessThan( items[2 * i + 1], items[2 * i] ) )
            {
                value = 2 * i + 1;
            }
            else
            {
                value = 2 * i;
            }
 
            if ( lessThan( items[value], items[i] ) )
            {
                temp = items[i];
                items[i] = items[value];
                items[value] = temp;
                i = value;
            }
            else
            {
                return;
            }
        }
    }
 
    public void reheapUp()
    {
        int num = numItems;
        while ( num != 1 && lessThan(items[num], items[num/2]))
        {
            Object temp = items[num/2];
            items[num/2] = items[num];
            items[num] = temp;
            num = num/2;
        }
    }
 
    private void growCapacity()
    {
        Object[] tempItems = new Object[2 * items.length - 1];
        System.arraycopy(items, 0, tempItems, 0, items.length);
        items = tempItems;
    }
 
    /**
    returns the String containing all the elements in level order
    @return the String containing all the elements in level order
     */
    public String toString()
    {
        String str = "";
        for( int i = 1; i <= numItems; i++ )
        {
            str = str + items[i].toString() + "\n";
        }
        return str; // Fix This!!!
    }
}