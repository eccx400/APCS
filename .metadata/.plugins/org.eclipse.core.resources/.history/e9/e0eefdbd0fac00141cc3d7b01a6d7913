import java.util.TreeMap;

/**
 * In 1838, Samuel Morse devised a signaling code for use with his
 * electromagnetic telegraph. The code used two basic signaling elements: the
 * “dot,” a short-duration electric current, and the “dash,” a longer-duration
 * signal. The signals lowered an ink pen mounted on a special arm, which left
 * dots and dashes on the strip of paper moving beneath. Morse’s code gained
 * wide acceptance and, in its international form, is still in use.
 * 
 * @author Eric Cheng
 * @version 31 January 2015
 * @author Period - 2
 * @author Assignment - JMCh23_6MorseCode
 * @author Sources - Eric Cheng
 */
public class MorseCode
{
    private static final char DOT = '.';

    private static final char DASH = '-';

    private static TreeMap<Character, String> codeMap;

    private static TreeNode<Character> decodeTree;


    public static void start()
    {
        codeMap = new TreeMap<Character, String>();

        // put a space in the root of the decoding tree
        decodeTree = new TreeNode<Character>( ' ', null, null ); // autoboxing

        addSymbol( 'A', ".-" );
        addSymbol( 'B', "-..." );
        addSymbol( 'C', "-.-." );
        addSymbol( 'D', "-.." );
        addSymbol( 'E', "." );
        addSymbol( 'F', "..-." );
        addSymbol( 'G', "--." );
        addSymbol( 'H', "...." );
        addSymbol( 'I', ".." );
        addSymbol( 'J', ".---" );
        addSymbol( 'K', "-.-" );
        addSymbol( 'L', ".-.." );
        addSymbol( 'M', "--" );
        addSymbol( 'N', "-." );
        addSymbol( 'O', "---" );
        addSymbol( 'P', ".--." );
        addSymbol( 'Q', "--.-" );
        addSymbol( 'R', ".-." );
        addSymbol( 'S', "..." );
        addSymbol( 'T', "-" );
        addSymbol( 'U', "..-" );
        addSymbol( 'V', "...-" );
        addSymbol( 'W', ".--" );
        addSymbol( 'X', "-..-" );
        addSymbol( 'Y', "-.--" );
        addSymbol( 'Z', "--.." );
        addSymbol( '0', "-----" );
        addSymbol( '1', ".----" );
        addSymbol( '2', "..---" );
        addSymbol( '3', "...--" );
        addSymbol( '4', "....-" );
        addSymbol( '5', "....." );
        addSymbol( '6', "-...." );
        addSymbol( '7', "--..." );
        addSymbol( '8', "---.." );
        addSymbol( '9', "----." );
        addSymbol( '.', ".-.-.-" );
        addSymbol( ',', "--..--" );
        addSymbol( '?', "..--.." );
    }


    /**
     * Inserts a letter and its Morse code string into the encoding map and
     * calls treeInsert to insert them into the decoding tree.
     */
    private static void addSymbol( char letter, String code )
    {
        codeMap.put( letter, code );
        treeInsert( letter, code );
    }


    /**
     * Inserts a letter and its Morse code string into the decoding tree. Each
     * dot-dash string corresponds to a path in the tree from the root to a
     * node: at a "dot" go left, at a "dash" go right. The node at the end of
     * the path holds the symbol for that code string.
     */
    private static void treeInsert( char letter, String code )
    {
        // TODO complete method
    }


    /**
     * Converts text into a Morse code message. Adds a space after a dot-dash
     * sequence for each letter. Other spaces in the text are transferred
     * directly into the encoded message.
     * 
     * @return the encoded message.
     */
    public static String encode( String text )
    {
        StringBuffer morse = new StringBuffer( 400 );
        char getLet = text.charAt( 0 );
        text = text.toUpperCase();

        while ( !text.isEmpty() )
        {
            text = text.substring( 1 );
            if ( !( getLet == ' ' ) )
            {
                morse.append( codeMap.get( getLet ) );
            }
            else
            {
                morse.append( " " );
            }
        }
        return morse.toString();
    }


    public static void process( TreeNode root )
    {
        if ( root == null )
            return;
        process( root.getLeft() );
        process( root.getRight() );
        String s = (String)root.getValue();
        if ( root.getLeft() != null )
            s += root.getLeft().getValue();
        if ( root.getRight() != null )
            s += root.getRight().getValue();
        root.setValue( s );
        System.out.println( s );
    }


    /**
     * Converts a Morse code message into a text string. Assumes that dot-dash
     * sequences for each letter are separated by one space. Additional spaces
     * are transferred directly into text.
     * 
     * @return the plain text message.
     */
    public static String decode( String morse )
    {
        StringBuffer text = new StringBuffer( 100 );

        // TODO complete method

        return text.toString();
    }


    // --------------------------------------------------------------------
    // For test purposes only. Not to be used in completing the assignment

    protected TreeMap<Character, String> getCodeMap()
    {
        return codeMap;
    }


    protected TreeNode<Character> getDecodeTree()
    {
        return decodeTree;
    }
}
